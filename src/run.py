# MEJORA: #13 (Integraci√≥n de Hydra) - Se reemplaza argparse por Hydra para una configuraci√≥n flexible.
# MEJORA: #16 (Visualizaci√≥n en Tiempo Real) - Se a√±ade el lanzamiento del servidor de visualizaci√≥n.

import hydra
from omegaconf import DictConfig, OmegaConf
import os
import threading
import webbrowser
import time
from pathlib import Path

from src.evolution import ConceptEvolution
from src.config import app_config
from src.webui.visualization import start_server

def read_file_content(filepath: str) -> str:
    """Lee el contenido de un archivo de texto"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except FileNotFoundError:
        print(f"‚ùå Error: Archivo no encontrado: '{filepath}'")
        exit(1)
    except Exception as e:
        print(f"‚ùå Error al leer archivo: {e}")
        exit(1)

@hydra.main(config_path="../configs", config_name="config", version_base=None)
def main(cfg: DictConfig):
    """
    Funci√≥n principal para ejecutar ConceptEvolve con configuraci√≥n de Hydra.
    """
    # Imprimir configuraci√≥n
    print("\n" + "="*70)
    print("üß¨ CONCEPTEVOLVE - EVOLUCI√ìN DE CONCEPTOS ALGOR√çTMICOS")
    print("="*70)
    print("\nüìä Configuraci√≥n del Experimento:")
    print(OmegaConf.to_yaml(cfg))

    # Configurar API key
    app_config.get_client()

    # Leer descripci√≥n del problema
    problem_description = read_file_content(cfg.problem_file)
    if not problem_description:
        print(f"‚ùå Error: El archivo de problema '{cfg.problem_file}' est√° vac√≠o.")
        exit(1)
    
    print(f"\nüéØ Problema:")
    print(f"   {problem_description[:200]}{'...' if len(problem_description) > 200 else ''}")
    print("\n" + "="*70 + "\n")

    # Iniciar el servidor de visualizaci√≥n en un hilo separado
    # El directorio de b√∫squeda ser√° el directorio de ejecuci√≥n de Hydra
    search_root = os.getcwd()
    db_path_from_config = cfg.database.db_path
    
    # Construimos la ruta absoluta al fichero de la base de datos
    db_abs_path = Path(search_root) / db_path_from_config
    
    port = 8000
    server_thread = threading.Thread(
        target=start_server,
        # MEJORA: Pasamos el directorio de b√∫squeda y la ruta espec√≠fica de la BD
        args=(port, search_root, str(db_abs_path)),
        daemon=True
    )
    server_thread.start()
    time.sleep(1)
    
    url = f"http://localhost:{port}"
    print(f"üé® Visualizaci√≥n en tiempo real disponible en: {url}")
    try:
        webbrowser.open_new_tab(url)
    except Exception as e:
        print(f"  (No se pudo abrir el navegador autom√°ticamente: {e})")

    # Crear y ejecutar proceso evolutivo
    evolution_process = ConceptEvolution(
        problem_description=problem_description,
        cfg=cfg
    )

    try:
        # MEJORA: Ejecutar el bucle principal de forma as√≠ncrona
        evolution_process.run()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Proceso interrumpido por el usuario")
        print("üíæ Guardando checkpoint de emergencia...")
        evolution_process.checkpoint_manager.save_checkpoint(
            evolution_process.db.get_all_programs(),
            evolution_process.current_generation,
            problem_description
        )
        print("‚úÖ Checkpoint guardado. Puedes reanudar con --resume")
    except Exception as e:
        print(f"\n\n‚ùå Error fatal: {e}")
        import traceback
        traceback.print_exc()
        print("\nüíæ Intentando guardar checkpoint de emergencia...")
        try:
            evolution_process.checkpoint_manager.save_checkpoint(
                evolution_process.db.get_all_programs(),
                evolution_process.current_generation,
                problem_description
            )
            print("‚úÖ Checkpoint de emergencia guardado")
        except:
            print("‚ùå No se pudo guardar checkpoint de emergencia")
        exit(1)

if __name__ == "__main__":
    main()